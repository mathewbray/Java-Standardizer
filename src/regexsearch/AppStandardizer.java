/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package regexsearch;

import common.exception.AppException;
import common.exception.ExceptionUtils;
import common.exception.FileException;
import common.gui.ArrowButton;
import common.gui.Colours;
import common.gui.FButton;
import common.gui.FCheckBox;
import common.gui.FLabel;
import common.gui.FMenu;
import common.gui.FMenuItem;
import common.gui.GuiUtils;
import common.gui.SinglePathnameFieldDialog;
import common.gui.SingleSelectionListEditor;
import common.gui.TextArea;
import common.gui.TextRendering;
import common.misc.ColourUtils;
import common.misc.FilenameSuffixFilter;
import common.misc.InputModifiers;
import common.misc.KeyAction;
import common.misc.ListEditor;
import common.misc.PathnameFilter;
import common.misc.Property;
import common.misc.PropertyString;
import common.misc.StringUtils;
import common.misc.SystemUtils;
import common.misc.TextFile;
import common.misc.TextUtils;
import common.misc.VHPos;
import common.regex.RegexUtils;
import common.textfield.PathnameField;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MenuEvent;

/**
 *
 * @author Mathew
 */
public class AppStandardizer extends javax.swing.JFrame implements ActionListener, MouseListener, PathnameField.IImportListener {

    /**
     * Creates new form AppStandardizer
     */
    public AppStandardizer() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        initComponents();
                    UIManager.LookAndFeelInfo lookAndFeel = getLookAndFeel( "Windows" );

            if ( lookAndFeel != null )
                UIManager.setLookAndFeel( lookAndFeel.getClassName() );
            }
            public static UIManager.LookAndFeelInfo getLookAndFeel( final String lnfName ){
		UIManager.LookAndFeelInfo[] lookAndFeels = UIManager.getInstalledLookAndFeels();
		for ( UIManager.LookAndFeelInfo lookAndFeelInfo : lookAndFeels )
		{
			if ( lookAndFeelInfo.getName().equals( lnfName ) ){
				return lookAndFeelInfo;
			}
		}
		return null;
            }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        fileSetKindLabel = new javax.swing.JLabel();
        fileSetKindComboBox = new javax.swing.JComboBox<>();
        fileSetKindComboBox = new JComboBox(FileSet.Kind.values());
        fileSetKindComboBox.setActionCommand(Command.SELECT_FILE_SET_KIND);
        fileSetKindComboBox.addActionListener(this);
        jLabel3 = new javax.swing.JLabel();
        fileSetPreviousButton = new javax.swing.JButton();
        //		fileSetPreviousButton = new FileSetButton(ScrollDirection.BACKWARD);
        //		fileSetPreviousButton.setToolTipText(GO_TO_FILE_SET_PREVIOUS_STR);
        //		fileSetPreviousButton.setActionCommand(Command.GO_TO_FILE_SET_PREVIOUS);
        fileSetPreviousButton.addActionListener(this);
        insertFileSetButton = new javax.swing.JButton();
        //		insertFileSetButton = new JButton(AppIcon.PLUS);
        //		insertFileSetButton.setMargin(ICON_BUTTON_MARGINS);
        insertFileSetButton.setToolTipText(INSERT_FILE_SET_STR);
        insertFileSetButton.setActionCommand(Command.INSERT_FILE_SET);
        insertFileSetButton.addActionListener(this);
        duplicateFileSetButton = new javax.swing.JButton();
        //duplicateFileSetButton = new JButton(AppIcon.RHOMB_PAIR);
        //duplicateFileSetButton.setMargin(ICON_BUTTON_MARGINS);
        duplicateFileSetButton.setToolTipText(DUPLICATE_FILE_SET_STR);
        duplicateFileSetButton.setActionCommand(Command.DUPLICATE_FILE_SET);
        duplicateFileSetButton.addActionListener(this);
        deleteFileSetButton = new javax.swing.JButton();
        //		deleteFileSetButton = new JButton(AppIcon.MINUS);
        //		deleteFileSetButton.setMargin(ICON_BUTTON_MARGINS);
        deleteFileSetButton.setToolTipText(DELETE_CURRENT_FILE_SET_STR);
        deleteFileSetButton.setActionCommand(Command.DELETE_FILE_SET);
        deleteFileSetButton.addActionListener(this);
        fileSetNextButton = new javax.swing.JButton();
        //		fileSetNextButton = new FileSetButton(ScrollDirection.FORWARD);
        //		fileSetNextButton.setToolTipText(GO_TO_FILE_SET_NEXT_STR);
        fileSetNextButton.setActionCommand(Command.GO_TO_FILE_SET_NEXT);
        fileSetNextButton.addActionListener(this);
        fileSetStartButton = new javax.swing.JButton();
        //		fileSetStartButton = new FileSetButton(ScrollDirection.BACKWARD, true);
        //		fileSetStartButton.setToolTipText(GO_TO_FILE_SET_START_STR);
        fileSetStartButton.setActionCommand(Command.GO_TO_FILE_SET_START);
        fileSetStartButton.addActionListener(this);
        fileSetEndButton = new javax.swing.JButton();
        //		fileSetEndButton = new FileSetButton(ScrollDirection.FORWARD, true);
        //		fileSetEndButton.setToolTipText(GO_TO_FILE_SET_END_STR);
        fileSetEndButton.setActionCommand(Command.GO_TO_FILE_SET_END);
        fileSetEndButton.addActionListener(this);
        fileSetKindLabel1 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        browseButtonOLD = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        preferenceMenuItem = new javax.swing.JMenuItem();
        Search = new javax.swing.JMenu();
        SearchGo = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea4.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea4.setColumns(20);
        jTextArea4.setForeground(new java.awt.Color(204, 204, 204));
        jTextArea4.setRows(5);
        jTextArea4.setText("Ready...");
        jScrollPane4.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );

        fileSetKindLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fileSetKindLabel.setText("File Set Type");
        fileSetKindLabel.setToolTipText("File-Set Kind or Type");

        fileSetKindComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSetKindComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("X / X");

        fileSetPreviousButton.setText("<");
        fileSetPreviousButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        insertFileSetButton.setText("+");
        insertFileSetButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        duplicateFileSetButton.setText("D");
        duplicateFileSetButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        deleteFileSetButton.setText("-");
        deleteFileSetButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        fileSetNextButton.setText(">");
        fileSetNextButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        fileSetStartButton.setText("|<");
        fileSetStartButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        fileSetEndButton.setText(">|");
        fileSetEndButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        fileSetKindLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fileSetKindLabel1.setText("Set Name");
        fileSetKindLabel1.setToolTipText("Just a description of this set.");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Pathname");

        jTextField1.setText("/");

        browseButtonOLD.setText("Browse");
        browseButtonOLD.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Include");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Exclude");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Target");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton9.setText(">");
        jButton9.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jButton6.setText("<");
        jButton6.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jButton10.setText("Escape");
        jButton10.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
        );

        jButton14.setText(">");
        jButton14.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jButton15.setText("<");
        jButton15.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jButton17.setText("Escape");
        jButton17.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
        );

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Replacement");
        jLabel8.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Target Name");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileSetKindLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileSetKindLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(fileSetKindComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 411, Short.MAX_VALUE)
                        .addComponent(insertFileSetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicateFileSetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteFileSetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(fileSetStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileSetPreviousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileSetNextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileSetEndButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField4)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButtonOLD, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField2)
                    .addComponent(jTextField3)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileSetKindLabel)
                    .addComponent(fileSetKindComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(fileSetPreviousButton)
                    .addComponent(insertFileSetButton)
                    .addComponent(duplicateFileSetButton)
                    .addComponent(deleteFileSetButton)
                    .addComponent(fileSetNextButton)
                    .addComponent(fileSetStartButton)
                    .addComponent(fileSetEndButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileSetKindLabel1)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(browseButtonOLD, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        preferenceMenuItem.setMnemonic('r');
        preferenceMenuItem.setText("Preferences");
        editMenu.add(preferenceMenuItem);

        menuBar.add(editMenu);

        Search.setText("Search");

        SearchGo.setText("Search");
        Search.add(SearchGo);

        menuBar.add(Search);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    private void fileSetKindComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSetKindComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileSetKindComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            //for (UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                //if ("Nimbus".equals(info.getName())) {
//                    //javax.swing.UIManager.setLookAndFeel("Windows");
//                    //break;
//                //}
//            //}
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AppStandardizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AppStandardizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AppStandardizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AppStandardizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AppStandardizer().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AppStandardizer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(AppStandardizer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(AppStandardizer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(AppStandardizer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Search;
    private javax.swing.JMenuItem SearchGo;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton browseButtonOLD;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JButton deleteFileSetButton;
    private javax.swing.JButton duplicateFileSetButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton fileSetEndButton;
    private javax.swing.JComboBox<String> fileSetKindComboBox;
    private javax.swing.JLabel fileSetKindLabel;
    private javax.swing.JLabel fileSetKindLabel1;
    private javax.swing.JButton fileSetNextButton;
    private javax.swing.JButton fileSetPreviousButton;
    private javax.swing.JButton fileSetStartButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton insertFileSetButton;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem preferenceMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    
    ////////////////////////////////////////////////////////////////////////
//  Constants
////////////////////////////////////////////////////////////////////////

	public static final		char	COMMENT_PREFIX_CHAR	= ';';

	private static final	int	SCROLL_INTERVAL	= 400;

	private static final	int	ARROW_BUTTON_WIDTH	= 24;
	private static final	int	ARROW_BUTTON_HEIGHT	= 21;
	private static final	int	ARROW_SIZE			= 7;

	private static final	Insets	ICON_BUTTON_MARGINS		= new Insets(1, 1, 1, 1);

	private static final	String	TITLE_STR				= App.SHORT_NAME + " : Control";
	private static final	String	FILE_SET_KIND_STR		= "File-set kind";
	private static final	String	PATHNAME_STR			= "Pathname";
	private static final	String	INCLUDE_STR				= "Include";
	private static final	String	EXCLUDE_STR				= "Exclude";
	private static final	String	TARGET_STR				= "Target";
	private static final	String	REPLACEMENT_STR			= "Replacement";
	private static final	String	REPLACE_STR				= "Replace";
	private static final	String	REGULAR_EXPRESSION_STR	= "Regular expression";
	private static final	String	IGNORE_CASE_STR			= "Ignore case";
	private static final	String	SHOW_NOT_FOUND_STR		= "Show not found";
	private static final	String	DELETE_STR				= "Delete";
	private static final	String	DELETE_FILE_SET_STR		= "Delete file set";
	private static final	String	DELETE_MESSAGE_STR		= "Do you want to delete the current file set?";

	private static final	String	INSERT_FILE_SET_STR			= "Insert a new file set (F2)";
	private static final	String	DUPLICATE_FILE_SET_STR		= "Duplicate the current file set (F3)";
	private static final	String	DELETE_CURRENT_FILE_SET_STR	= "Delete the current file set (F4)";
	private static final	String	GO_TO_FILE_SET_START_STR	= "Go to the start of the file-set list (F5)";
	private static final	String	GO_TO_FILE_SET_END_STR		= "Go to the end of the file-set list (F8)";
	private static final	String	GO_TO_FILE_SET_PREVIOUS_STR	= "Go to the previous file set (F6), or move the file "
																	+ "set up (Ctrl+F6)";
	private static final	String	GO_TO_FILE_SET_NEXT_STR		= "Go to the next file set (F7), or move the file set "
																	+ "down (Ctrl+F7)";
	private static final	String	ESCAPE_TARGET_STR			= "Escape the target text";
	private static final	String	ESCAPE_REPLACEMENT_STR		= "Escape the replacement text";

	private enum ScrollDirection
	{
		BACKWARD,
		FORWARD
	}

	// Commands
	private interface Command
	{
		String	SELECT_FILE_SET_KIND	= "selectFileSetKind";
		String	INSERT_FILE_SET			= "insertFileSet";
		String	DUPLICATE_FILE_SET		= "duplicateFileSet";
		String	DELETE_FILE_SET			= "deleteFileSet";
		String	SCROLL_FILE_SET			= "scrollFileSet";
		String	GO_TO_FILE_SET_PREVIOUS	= "goToFileSetPrevious";
		String	GO_TO_FILE_SET_NEXT		= "goToFileSetNext";
		String	GO_TO_FILE_SET_START	= "goToFileSetStart";
		String	GO_TO_FILE_SET_END		= "goToFileSetEnd";
		String	MOVE_FILE_SET_UP		= "moveFileSetUp";
		String	MOVE_FILE_SET_DOWN		= "moveFileSetDown";
		String	ESCAPE_TARGET			= "escapeTarget";
		String	ESCAPE_REPLACEMENT		= "escapeReplacement";
		String	TOGGLE_REPLACE			= "toggleReplace";
		String	TOGGLE_REGEX			= "toggleRegex";
		String	SHOW_CONTEXT_MENU		= "showContextMenu";
                
                //Pathname Editor
                String	CHOOSE_PATHNAME		= "choosePathname";
		String	EDIT				= "edit";
		String	COPY				= "copy";
//		String	SHOW_CONTEXT_MENU	= "showContextMenu";
                
	}

	private static final	KeyAction.KeyCommandPair[]	KEY_COMMANDS	=
	{
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0),
									 Command.INSERT_FILE_SET),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0),
									 Command.DUPLICATE_FILE_SET),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0),
									 Command.DELETE_FILE_SET),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F6, 0),
									 Command.GO_TO_FILE_SET_PREVIOUS),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0),
									 Command.GO_TO_FILE_SET_NEXT),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0),
									 Command.GO_TO_FILE_SET_START),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F8, 0),
									 Command.GO_TO_FILE_SET_END),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F6, KeyEvent.CTRL_DOWN_MASK),
									 Command.MOVE_FILE_SET_UP),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_F7, KeyEvent.CTRL_DOWN_MASK),
									 Command.MOVE_FILE_SET_DOWN),
		new KeyAction.KeyCommandPair(KeyStroke.getKeyStroke(KeyEvent.VK_CONTEXT_MENU, 0),
									 Command.SHOW_CONTEXT_MENU)
	};

////////////////////////////////////////////////////////////////////////
//  Enumerated types
////////////////////////////////////////////////////////////////////////


	// ERROR IDENTIFIERS


	private enum ErrorId
		implements AppException.IId
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		NO_PATHNAME
		("No pathname was specified."),

		FILE_DOES_NOT_EXIST
		("The file does not exist."),

		DIRECTORY_DOES_NOT_EXIST
		("The directory does not exist."),

		FILE_OR_DIRECTORY_DOES_NOT_EXIST
		("The file or directory specified by this pathname in the list file does not exist."),

		FILE_ACCESS_NOT_PERMITTED
		("Access to the file was not permitted."),

		DIRECTORY_ACCESS_NOT_PERMITTED
		("Access to the directory was not permitted."),

		FILE_OR_DIRECTORY_ACCESS_NOT_PERMITTED
		("Access to the file or directory specified in the list file was not permitted."),

		NO_RESULTS
		("No search results have been saved."),

		NO_TARGET
		("No target was specified."),

		MALFORMED_REGULAR_EXPRESSION
		("The target is not a well-formed regular expression.");

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ErrorId(String message)
		{
			this.message = message;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : AppException.IId interface
	////////////////////////////////////////////////////////////////////

		public String getMessage()
		{
			return message;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	String	message;

	}

	//==================================================================

////////////////////////////////////////////////////////////////////////
//  Member classes : non-inner classes
////////////////////////////////////////////////////////////////////////


	// FILE-SET INDEX FIELD CLASS


	private static class FileSetIndexField
		extends JComponent
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int	VERTICAL_MARGIN		= 2;
		private static final	int	HORIZONTAL_MARGIN	= 5;

		private static final	Color	BORDER_COLOUR		= ArrowButton.BORDER_COLOUR;
		private static final	Color	BACKGROUND_COLOUR	= SingleSelectionListEditor.BACKGROUND_COLOUR;
		private static final	Color	TEXT_COLOUR			= Colours.FOREGROUND;

		private static final	String	PROTOTYPE_STR	= "000 / 000";
		private static final	String	END_STR			= "End";

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private FileSetIndexField()
		{
			AppFont.MAIN.apply(this);
			FontMetrics fontMetrics = getFontMetrics(getFont());
			preferredWidth = 2 * HORIZONTAL_MARGIN + fontMetrics.stringWidth(PROTOTYPE_STR);
			preferredHeight = 2 * VERTICAL_MARGIN + fontMetrics.getAscent() + fontMetrics.getDescent();
			index = -1;
			setOpaque(true);
			setFocusable(false);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		public Dimension getPreferredSize()
		{
			return new Dimension(preferredWidth, preferredHeight);
		}

		//--------------------------------------------------------------

		@Override
		protected void paintComponent(Graphics gr)
		{
			// Create copy of graphics context
			gr = gr.create();

			// Fill background
			Rectangle rect = gr.getClipBounds();
			gr.setColor(BACKGROUND_COLOUR);
			gr.fillRect(rect.x, rect.y, rect.width, rect.height);

			// Get dimensions
			int width = getWidth();
			int height = getHeight();

			// Set rendering hints for text antialiasing and fractional metrics
			TextRendering.setHints((Graphics2D)gr);

			// Draw text
			String str = getText();
			FontMetrics fontMetrics = gr.getFontMetrics();
			gr.setColor(TEXT_COLOUR);
			gr.drawString(str, (width - fontMetrics.stringWidth(str)) / 2,
						  GuiUtils.getBaselineOffset(height, fontMetrics));

			// Draw border
			gr.setColor(BORDER_COLOUR);
			gr.drawRect(0, 0, width - 1, height - 1);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods
	////////////////////////////////////////////////////////////////////

		public void setValues(int index,
							  int maxIndex)
		{
			if ((this.index != index) || (this.maxIndex != maxIndex))
			{
				this.index = index;
				this.maxIndex = maxIndex;
				repaint();
			}
		}

		//--------------------------------------------------------------

		private String getText()
		{
			return ((index > maxIndex) ? END_STR
									   : Integer.toString(index + 1) + " / " + Integer.toString(maxIndex + 1));
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	int	preferredWidth;
		private	int	preferredHeight;
		private	int	index;
		private	int	maxIndex;

	}

	//==================================================================


	// ESCAPE STATUS INDICATOR CLASS


	private static class EscapeIndicator
		extends JComponent
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int	VERTICAL_MARGIN		= 1;
		private static final	int	HORIZONTAL_MARGIN	= 4;

		private static final	Color	BORDER_COLOUR		= SingleSelectionListEditor.BORDER_COLOUR;
		private static final	Color	BACKGROUND_COLOUR	= SingleSelectionListEditor.BACKGROUND_COLOUR;
		private static final	Color	TEXT_COLOUR			= Colours.FOREGROUND;

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private EscapeIndicator(String text)
		{
			this.text = text;
			AppFont.MAIN.apply(this);
			FontMetrics fontMetrics = getFontMetrics(getFont());
			preferredWidth = Math.max(preferredWidth, 2 * HORIZONTAL_MARGIN + fontMetrics.stringWidth(text));
			preferredHeight = Math.max(preferredHeight,
									   2 * VERTICAL_MARGIN + fontMetrics.getAscent() + fontMetrics.getDescent());
			setOpaque(true);
			setFocusable(false);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		public Dimension getPreferredSize()
		{
			return new Dimension(preferredWidth, preferredHeight);
		}

		//--------------------------------------------------------------

		@Override
		protected void paintComponent(Graphics gr)
		{
			// Create copy of graphics context
			gr = gr.create();

			// Fill background
			Rectangle rect = gr.getClipBounds();
			gr.setColor(BACKGROUND_COLOUR);
			gr.fillRect(rect.x, rect.y, rect.width, rect.height);

			// Get dimensions
			int width = getWidth();
			int height = getHeight();

			// Set rendering hints for text antialiasing and fractional metrics
			TextRendering.setHints((Graphics2D)gr);

			// Draw text
			FontMetrics fontMetrics = gr.getFontMetrics();
			gr.setColor(TEXT_COLOUR);
			gr.drawString(text, (width - fontMetrics.stringWidth(text)) / 2,
						  GuiUtils.getBaselineOffset(height, fontMetrics));

			// Draw border
			gr.setColor(BORDER_COLOUR);
			gr.drawRect(0, 0, width - 1, height - 1);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Class fields
	////////////////////////////////////////////////////////////////////

		private static	int	preferredWidth;
		private static	int	preferredHeight;

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	String	text;

	}

	//==================================================================


	// ESCAPE STATUS PANEL CLASS


	private static class EscapeStatusPanel
		extends JPanel
		implements ParameterEditor.EscapeListener
	{

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private EscapeStatusPanel()
		{
			super(new GridLayout(1, 0, -1, 0));

			tabIndicator = new EscapeIndicator("t");
			add(tabIndicator);

			lineFeedIndicator = new EscapeIndicator("n");
			add(lineFeedIndicator);

			setTabsEscaped(false);
			setLineFeedsEscaped(false);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : ParameterEditor.EscapeListener interface
	////////////////////////////////////////////////////////////////////

		public void setTabsEscaped(boolean escaped)
		{
			tabIndicator.setVisible(escaped);
		}

		//--------------------------------------------------------------

		public void setLineFeedsEscaped(boolean escaped)
		{
			lineFeedIndicator.setVisible(escaped);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	EscapeIndicator	tabIndicator;
		private	EscapeIndicator	lineFeedIndicator;

	}

	//==================================================================

////////////////////////////////////////////////////////////////////////
//  Member classes : inner classes
////////////////////////////////////////////////////////////////////////


	// FILE-SET BUTTON CLASS


	private class FileSetButton
		extends ArrowButton
		implements MouseListener, Runnable
	{

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private FileSetButton(ScrollDirection scrollDirection)
		{
			this(scrollDirection, false);
		}

		//--------------------------------------------------------------

		private FileSetButton(ScrollDirection scrollDirection,
							  boolean         bar)

		{
			super(ARROW_BUTTON_WIDTH, ARROW_BUTTON_HEIGHT, ARROW_SIZE, bar);
			this.scrollDirection = scrollDirection;
			setDirection((scrollDirection == ScrollDirection.BACKWARD) ? ArrowButton.Direction.LEFT : ArrowButton.Direction.RIGHT);
			if (!bar)
				setActive(ArrowButton.Active.PRESSED);
			addMouseListener(this);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : MouseListener interface
	////////////////////////////////////////////////////////////////////

		public void mouseClicked(MouseEvent event)
		{
			// do nothing
		}

		//--------------------------------------------------------------

		public void mouseEntered(MouseEvent event)
		{
			// do nothing
		}

		//--------------------------------------------------------------

		public void mouseExited(MouseEvent event)
		{
			// do nothing
		}

		//--------------------------------------------------------------

		public void mousePressed(MouseEvent event)
		{
			if (!isBar() && isEnabled())
			{
				moveFileSet = InputModifiers.forEvent(event).isControl();
				SwingUtilities.invokeLater(this);
			}
		}

		//--------------------------------------------------------------

		public void mouseReleased(MouseEvent event)
		{
			if (!isBar() && (AppStandardizer.this.scrollDirection == scrollDirection))
				stopScrolling();
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : Runnable interface
	////////////////////////////////////////////////////////////////////

		public void run()
		{
			AppStandardizer.this.scrollDirection = scrollDirection;
			scrollTimer.start();
			onScrollFileSet();
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		protected void fireActionPerformed(ActionEvent event)
		{
			if (!isScrolling() || (event.getID() != ActionEvent.ACTION_PERFORMED))
				super.fireActionPerformed(event);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	ScrollDirection	scrollDirection;

	}

	//==================================================================

////////////////////////////////////////////////////////////////////////
//  Constructors
////////////////////////////////////////////////////////////////////////

	private AppStandardizer(MainWindow mainWindow)
	{
		// Call superclass constructor
		//super(mainWindow, TITLE_STR);

		// Set icons
		setIconImages(mainWindow.getIconImages());

		// Initialise instance fields
		this.mainWindow = mainWindow;
		scrollTimer = new Timer(SCROLL_INTERVAL, this);
		scrollTimer.setActionCommand(Command.SCROLL_FILE_SET);


		//----  Main panel

		AppConfig config = AppConfig.INSTANCE;

		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints gbc = new GridBagConstraints();

		JPanel mainPanel = new JPanel(gridBag);
		mainPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));

		int gridY = 0;

		// Label: file-set kind
//		JLabel fileSetKindLabel = new FLabel(FILE_SET_KIND_STR);
//
//		gbc.gridx = 0;
//		gbc.gridy = gridY;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_END;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = AppConstants.COMPONENT_INSETS;
//		gridBag.setConstraints(fileSetKindLabel, gbc);
//		mainPanel.add(fileSetKindLabel);

		// Panel: file-set control
		JPanel fileSetControlPanel = new JPanel(gridBag);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(fileSetControlPanel, gbc);
		mainPanel.add(fileSetControlPanel);

		// Combo box: file-set kind
		fileSetKindComboBox = new JComboBox(FileSet.Kind.values());
		fileSetKindComboBox.setActionCommand(Command.SELECT_FILE_SET_KIND);
		fileSetKindComboBox.addActionListener(this);

                int gridX = 0;
//
//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 0, 0, 0);
//		gridBag.setConstraints(fileSetKindComboBox, gbc);
//		fileSetControlPanel.add(fileSetKindComboBox);

		// Filler: file-set control panel
		Box.Filler fileSetControlPanelFiller = GuiUtils.createFiller();

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 12, 0, 0);
		gridBag.setConstraints(fileSetControlPanelFiller, gbc);
		fileSetControlPanel.add(fileSetControlPanelFiller);

		// Panel: file set
		JPanel fileSetPanel = new JPanel(gridBag);

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(fileSetPanel, gbc);
		fileSetControlPanel.add(fileSetPanel);

		// Panel: file set commands
		JPanel fileSetCommandPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(fileSetCommandPanel, 3, 5);
		Color backgroundColour = fileSetCommandPanel.getBackground();
		if (backgroundColour != null)
			fileSetCommandPanel.setBackground(ColourUtils.scaleBrightness(backgroundColour, 0.9375f));

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(fileSetCommandPanel, gbc);
		fileSetPanel.add(fileSetCommandPanel);

		gridX = 0;

		// Button: insert file set
//		pathnameEditor = new JButton(AppIcon.PLUS);
//		pathnameEditor.setMargin(ICON_BUTTON_MARGINS);
//		pathnameEditor.setToolTipText(INSERT_FILE_SET_STR);
//		pathnameEditor.setActionCommand(Command.INSERT_FILE_SET);
//		pathnameEditor.addActionListener(this);
//
//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 0, 0, 0);
//		gridBag.setConstraints(pathnameEditor, gbc);
//		fileSetCommandPanel.add(pathnameEditor);

		// Button: duplicate file set
//		duplicateFileSetButton = new JButton(AppIcon.RHOMB_PAIR);
//		duplicateFileSetButton.setMargin(ICON_BUTTON_MARGINS);
//		duplicateFileSetButton.setToolTipText(DUPLICATE_FILE_SET_STR);
//		duplicateFileSetButton.setActionCommand(Command.DUPLICATE_FILE_SET);
//		duplicateFileSetButton.addActionListener(this);

//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 6, 0, 0);
//		gridBag.setConstraints(duplicateFileSetButton, gbc);
//		fileSetCommandPanel.add(duplicateFileSetButton);

		// Button: delete file set
//		deleteFileSetButton = new JButton(AppIcon.MINUS);
//		deleteFileSetButton.setMargin(ICON_BUTTON_MARGINS);
//		deleteFileSetButton.setToolTipText(DELETE_CURRENT_FILE_SET_STR);
//		deleteFileSetButton.setActionCommand(Command.DELETE_FILE_SET);
//		deleteFileSetButton.addActionListener(this);

//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 6, 0, 0);
//		gridBag.setConstraints(deleteFileSetButton, gbc);
//		fileSetCommandPanel.add(deleteFileSetButton);

		// Panel: file set navigation
		JPanel fileSetNavigationPanel = new JPanel(gridBag);
		GuiUtils.setPaddedLineBorder(fileSetNavigationPanel, 2);
		fileSetNavigationPanel.setBackground(SingleSelectionListEditor.BACKGROUND_COLOUR);

		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 12, 0, 0);
		gridBag.setConstraints(fileSetNavigationPanel, gbc);
		fileSetPanel.add(fileSetNavigationPanel);

		gridX = 0;

		// Button: start of file-set list
//		fileSetStartButton = new FileSetButton(ScrollDirection.BACKWARD, true);
//		fileSetStartButton.setToolTipText(GO_TO_FILE_SET_START_STR);
//		fileSetStartButton.setActionCommand(Command.GO_TO_FILE_SET_START);
//		fileSetStartButton.addActionListener(this);

//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 0, 0, 0);
//		gridBag.setConstraints(fileSetStartButton, gbc);
//		fileSetNavigationPanel.add(fileSetStartButton);

		// Button: previous file set
//		fileSetPreviousButton = new FileSetButton(ScrollDirection.BACKWARD);
//		fileSetPreviousButton.setToolTipText(GO_TO_FILE_SET_PREVIOUS_STR);
//		fileSetPreviousButton.setActionCommand(Command.GO_TO_FILE_SET_PREVIOUS);
//		fileSetPreviousButton.addActionListener(this);

//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 2, 0, 0);
//		gridBag.setConstraints(fileSetPreviousButton, gbc);
//		fileSetNavigationPanel.add(fileSetPreviousButton);

		// Field: file-set index
		fileSetIndexField = new FileSetIndexField();

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.VERTICAL;
		gbc.insets = new Insets(0, 2, 0, 0);
		gridBag.setConstraints(fileSetIndexField, gbc);
		fileSetNavigationPanel.add(fileSetIndexField);

		// Button: next file set
//		fileSetNextButton = new FileSetButton(ScrollDirection.FORWARD);
//		fileSetNextButton.setToolTipText(GO_TO_FILE_SET_NEXT_STR);
//		fileSetNextButton.setActionCommand(Command.GO_TO_FILE_SET_NEXT);
//		fileSetNextButton.addActionListener(this);

//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 2, 0, 0);
//		gridBag.setConstraints(fileSetNextButton, gbc);
//		fileSetNavigationPanel.add(fileSetNextButton);

		// Button: end of file-set list
//		fileSetEndButton = new FileSetButton(ScrollDirection.FORWARD, true);
//		fileSetEndButton.setToolTipText(GO_TO_FILE_SET_END_STR);
//		fileSetEndButton.setActionCommand(Command.GO_TO_FILE_SET_END);
//		fileSetEndButton.addActionListener(this);

//		gbc.gridx = gridX++;
//		gbc.gridy = 0;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 0.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.NONE;
//		gbc.insets = new Insets(0, 2, 0, 0);
//		gridBag.setConstraints(fileSetEndButton, gbc);
//		fileSetNavigationPanel.add(fileSetEndButton);

		// Label: pathname
		JLabel pathnameLabel = new FLabel(PATHNAME_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(pathnameLabel, gbc);
		mainPanel.add(pathnameLabel);

		// Editor: pathname
		pathnameEditor = new PathnameEditor(FileSet.MAX_NUM_PATHNAMES);
		pathnameEditor.addImportListener(this);
		pathnameEditor.addUnixStyleObserver();

//		gbc.gridx = 1;
//		gbc.gridy = gridY++;
//		gbc.gridwidth = 1;
//		gbc.gridheight = 1;
//		gbc.weightx = 1.0;
//		gbc.weighty = 0.0;
//		gbc.anchor = GridBagConstraints.LINE_START;
//		gbc.fill = GridBagConstraints.HORIZONTAL;
//		gbc.insets = AppConstants.COMPONENT_INSETS;
//		gridBag.setConstraints(pathnameEditor, gbc);
//		mainPanel.add(pathnameEditor);

		// Label: inclusion filter
		JLabel inclusionFilterLabel = new FLabel(INCLUDE_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(inclusionFilterLabel, gbc);
		mainPanel.add(inclusionFilterLabel);

		// Editor: inclusion filter
		inclusionFilterEditor = new FilterEditor(FileSet.FilterKind.INCLUSION, FileSet.MAX_NUM_FILTERS, true);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(inclusionFilterEditor, gbc);
		mainPanel.add(inclusionFilterEditor);

		// Label: exclusion filter
		JLabel exclusionFilterLabel = new FLabel(EXCLUDE_STR);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(exclusionFilterLabel, gbc);
		mainPanel.add(exclusionFilterLabel);

		// Editor: exclusion filter
		exclusionFilterEditor = new FilterEditor(FileSet.FilterKind.EXCLUSION, FileSet.MAX_NUM_FILTERS, false);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(exclusionFilterEditor, gbc);
		mainPanel.add(exclusionFilterEditor);

		// Panel: target label
		JPanel targetLabelPanel = new JPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.FIRST_LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(targetLabelPanel, gbc);
		mainPanel.add(targetLabelPanel);

		// Label: target
		JLabel targetLabel = new FLabel(TARGET_STR);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(2, 0, 0, 0);
		gridBag.setConstraints(targetLabel, gbc);
		targetLabelPanel.add(targetLabel);

		// Panel: target escape status
		EscapeStatusPanel targetEscapeStatusPanel = new EscapeStatusPanel();

		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(8, 2, 2, 2);
		gridBag.setConstraints(targetEscapeStatusPanel, gbc);
		targetLabelPanel.add(targetEscapeStatusPanel);

		// Editor: target
		targetEditor = new ParameterEditor(ParameterEditor.ParamKind.TARGET, SearchParameters.MAX_NUM_TARGETS, '\\',
										   targetEscapeStatusPanel);
		JButton escapeButton = targetEditor.getEscapeButton();
		escapeButton.setToolTipText(ESCAPE_TARGET_STR);
		escapeButton.setActionCommand(Command.ESCAPE_TARGET);
		escapeButton.addActionListener(this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.5;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(targetEditor, gbc);
		mainPanel.add(targetEditor);

		// Panel: replacement label
		JPanel replacementLabelPanel = new JPanel(gridBag);

		gbc.gridx = 0;
		gbc.gridy = gridY;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.FIRST_LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(replacementLabelPanel, gbc);
		mainPanel.add(replacementLabelPanel);

		// Label: replacement
		JLabel replacementLabel = new FLabel(REPLACEMENT_STR);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(2, 0, 0, 0);
		gridBag.setConstraints(replacementLabel, gbc);
		replacementLabelPanel.add(replacementLabel);

		// Panel: replacement escape status
		EscapeStatusPanel replacementEscapeStatusPanel = new EscapeStatusPanel();

		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_END;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(8, 2, 2, 2);
		gridBag.setConstraints(replacementEscapeStatusPanel, gbc);
		replacementLabelPanel.add(replacementEscapeStatusPanel);

		// Editor: replacement
		replacementEditor = new ParameterEditor(ParameterEditor.ParamKind.REPLACEMENT,
												SearchParameters.MAX_NUM_REPLACEMENTS,
												config.getReplacementEscapeChar(), replacementEscapeStatusPanel);

		escapeButton = replacementEditor.getEscapeButton();
		escapeButton.setToolTipText(ESCAPE_REPLACEMENT_STR);
		escapeButton.setActionCommand(Command.ESCAPE_REPLACEMENT);
		escapeButton.addActionListener(this);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 1.0;
		gbc.weighty = 0.5;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = AppConstants.COMPONENT_INSETS;
		gridBag.setConstraints(replacementEditor, gbc);
		mainPanel.add(replacementEditor);

		// Panel: check boxes
		JPanel checkBoxPanel = new JPanel(gridBag);

		gbc.gridx = 1;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(3, 3, 1, 3);
		gridBag.setConstraints(checkBoxPanel, gbc);
		mainPanel.add(checkBoxPanel);

		// Check box: replace
		gridX = 0;

		replaceCheckBox = new FCheckBox(REPLACE_STR);
		replaceCheckBox.setMnemonic(KeyEvent.VK_R);
		replaceCheckBox.setActionCommand(Command.TOGGLE_REPLACE);
		replaceCheckBox.addActionListener(this);

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(replaceCheckBox, gbc);
		checkBoxPanel.add(replaceCheckBox);

		// Check box: regular expression
		regexCheckBox = new FCheckBox(REGULAR_EXPRESSION_STR);
		regexCheckBox.setMnemonic(KeyEvent.VK_E);
		regexCheckBox.setActionCommand(Command.TOGGLE_REGEX);
		regexCheckBox.addActionListener(this);

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 16, 0, 0);
		gridBag.setConstraints(regexCheckBox, gbc);
		checkBoxPanel.add(regexCheckBox);

		// Check box: ignore case
		ignoreCaseCheckBox = new FCheckBox(IGNORE_CASE_STR);
		ignoreCaseCheckBox.setMnemonic(KeyEvent.VK_I);

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 16, 0, 0);
		gridBag.setConstraints(ignoreCaseCheckBox, gbc);
		checkBoxPanel.add(ignoreCaseCheckBox);

		// Check box: show not found
		showNotFoundCheckBox = new FCheckBox(SHOW_NOT_FOUND_STR);
		showNotFoundCheckBox.setMnemonic(KeyEvent.VK_N);

		gbc.gridx = gridX++;
		gbc.gridy = 0;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.LINE_START;
		gbc.fill = GridBagConstraints.NONE;
		gbc.insets = new Insets(0, 16, 0, 0);
		gridBag.setConstraints(showNotFoundCheckBox, gbc);
		checkBoxPanel.add(showNotFoundCheckBox);

		// Set transfer handler
		mainPanel.setTransferHandler(FileTransferHandler.INSTANCE);

		// Add listener
		mainPanel.addMouseListener(this);

		// Add commands from main window menu to action map
		for (AppCommand command : AppCommand.values())
			KeyAction.create(mainPanel, JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, command);

		// Add commands to action map
		KeyAction.create(mainPanel, JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, this, KEY_COMMANDS);


		//----  Window

		// Set content pane
		setContentPane(mainPanel);

		// Update components
		updateComponents();

		// Dispose of window explicitly
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

		// Handle window closing
		addWindowListener(new WindowAdapter()
		{
			@Override
			public void windowClosing(WindowEvent event)
			{
				AppCommand.EXIT.execute();
			}
		});

		// Resize dialog to its preferred size
		pack();

		// Set initial size of parameter editor
		initialParameterEditorSize = targetEditor.getTextAreaViewportSize();

		// Set location of window
		Point location = null;
		if (config.isMainWindowLocation())
			//location = config.getAppStandardizerLocation();
		if (location == null)
			location = GuiUtils.getComponentLocation(this, mainWindow, VHPos.BOTTOM_CENTRE);
		setLocation(GuiUtils.getLocationWithinScreen(this, location));

		// Set focus
		targetEditor.requestFocusInWindow();

		// Make window visible
		setVisible(true);
                
                
                
                
                		// Set icons
		setIconImages(AppIcon.getAppIconImages());


		//----  Menu bar

		JMenuBar menuBar = new JMenuBar();
		menuBar.setBorder(null);

		// File menu
		JMenu menu = Menu.FILE.menu;
		//menu.addMenuListener(this);

		menu.add(new FMenuItem(AppCommand.OPEN_SEARCH_PARAMETERS, KeyEvent.VK_O));
		menu.add(new FMenuItem(AppCommand.SAVE_SEARCH_PARAMETERS, KeyEvent.VK_S));

		menu.addSeparator();

		menu.add(new FMenuItem(AppCommand.EXIT, KeyEvent.VK_X));

		menuBar.add(menu);

		// Edit menu
		menu = Menu.EDIT.menu;
		//menu.addMenuListener(this);

		menu.add(new FMenuItem(AppCommand.EDIT_FILE, KeyEvent.VK_E));
		menu.add(new FMenuItem(AppCommand.EDIT_FILE_DEFERRED, KeyEvent.VK_D));

		menuBar.add(menu);

		// Search menu
		menu = Menu.SEARCH.menu;
		//menu.addMenuListener(this);

		menu.add(new FMenuItem(AppCommand.SEARCH, KeyEvent.VK_S));

		menu.addSeparator();

		menu.add(new FMenuItem(AppCommand.COPY_RESULTS, KeyEvent.VK_C));
		menu.add(new FMenuItem(AppCommand.SAVE_RESULTS, KeyEvent.VK_A));
		menu.add(new FMenuItem(AppCommand.VIEW_SAVED_RESULTS, KeyEvent.VK_V));

		menuBar.add(menu);

		// View menu
		menu = Menu.VIEW.menu;
		//menu.addMenuListener(this);

		menu.add(new FMenuItem(AppCommand.TOGGLE_CONTROL_DIALOG, KeyEvent.VK_C));

		menuBar.add(menu);

		// Options menu
		menu = Menu.OPTIONS.menu;
		//menu.addMenuListener(this);

		menu.add(new FMenuItem(AppCommand.EDIT_PREFERENCES, KeyEvent.VK_P));

		menuBar.add(menu);

		// Set menu bar
		setJMenuBar(menuBar);


		//----  Text view scroll pane

		// Text area: text view
		config = AppConfig.INSTANCE;

		textView = new TextArea(config.getTextViewViewableSize().width, config.getTextViewViewableSize().height,
								config.getTextViewMaxNumColumns(), AppFont.TEXT_VIEW.getFont());
		textView.setBlockIncrementRows(textView.getRows() - 2);
		setTextAreaColours(textView);
		textView.setDoubleBuffered(false);
		textView.setAntialiasing(config.getTextViewTextAntialiasing());

		textView.addMouseListener(this);

		// Scroll pane: text view
		ScrollPane textViewScrollPane = new ScrollPane(textView);


		//----  Result area

		// Text area: results
		resultArea = new ResultArea(config.getTextViewViewableSize().width, config.getResultAreaNumRows());
		resultArea.setModel(new ResultList());
		resultArea.setBlockIncrementRows(resultArea.getRows() - 1);
		setTextAreaColours(resultArea);
		resultArea.setDoubleBuffered(false);
		resultArea.setAntialiasing(TextRendering.getAntialiasing());

		resultArea.addMouseListener(this);
		getResultList().addChangeListener(resultArea);

		// Scroll pane: results
		ScrollPane resultAreaScrollPane = new ScrollPane(resultArea);


		//----  Main panel

//		GridBagLayout gridBag = new GridBagLayout();
//		GridBagConstraints gbc = new GridBagConstraints();
//
//		JPanel mainPanel = new JPanel(gridBag);
//
//		int gridY = 0;

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(textViewScrollPane, gbc);
		mainPanel.add(textViewScrollPane);

		gbc.gridx = 0;
		gbc.gridy = gridY++;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0.0;
		gbc.weighty = 0.0;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0, 0, 0, 0);
		gridBag.setConstraints(resultAreaScrollPane, gbc);
		mainPanel.add(resultAreaScrollPane);

		// Set transfer handler on main panel
		mainPanel.setTransferHandler(FileTransferHandler.INSTANCE);

		// Add listener
		mainPanel.addMouseListener(this);


		//----  Window

		// Set content pane
		setContentPane(mainPanel);

		// Update title
		updateTitle();

		// Dispose of window explicitly
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

		// Handle window closing
		addWindowListener(new WindowAdapter()
		{
			@Override
			public void windowClosing(WindowEvent event)
			{
				AppCommand.EXIT.execute();
			}
		});

		// Prevent window from being resized
		setResizable(false);

		// Resize window to its preferred size
		pack();

		// Set location of window
		if (config.isMainWindowLocation())
			setLocation(GuiUtils.getLocationWithinScreen(this, config.getMainWindowLocation()));

		// Make window visible
		//setVisible(true);
                

	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Class methods
////////////////////////////////////////////////////////////////////////

	public static AppStandardizer showDialog(MainWindow mainWindow)
	{
		return new AppStandardizer(mainWindow);
	}

	//------------------------------------------------------------------

	private static SearchParameters getSearchParams()
	{
		return App.INSTANCE.getSearchParams();
                
	}

	//------------------------------------------------------------------

	private static List<File> readListFile(File listFile)
		throws AppException
	{
		// Parse file
		List<File> files = new ArrayList<>();
		for (String str : TextFile.readLines(listFile, TextModel.getCharacterEncoding()))
		{
			// Set index of end of pathname, ignoring any comment
			int index = str.indexOf(COMMENT_PREFIX_CHAR);
			if (index >= 0)
			{
				while (--index >= 0)
				{
					char ch = str.charAt(index);
					if ((ch != '\t') && (ch != ' '))
						break;
				}
				str = str.substring(0, ++index);
			}

			// Parse pathname and add file to list
			if (!str.isEmpty())
			{
				File file = new File(PropertyString.parsePathname(str));
				try
				{
					if (!file.isFile() && !file.isDirectory())
						throw new FileException(ErrorId.FILE_OR_DIRECTORY_DOES_NOT_EXIST, file);
					files.add(file);
				}
				catch (SecurityException e)
				{
					throw new FileException(ErrorId.FILE_OR_DIRECTORY_ACCESS_NOT_PERMITTED, file);
				}
			}
		}

		// Return files
		return files;
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods : ActionListener interface
////////////////////////////////////////////////////////////////////////

	@Override
	public void actionPerformed(ActionEvent event)
	{
		String command = event.getActionCommand();

		if (command.equals(Command.SELECT_FILE_SET_KIND))
			onSelectFileSetKind();

		else if (command.equals(Command.INSERT_FILE_SET))
			onInsertFileSet();

		else if (command.equals(Command.DUPLICATE_FILE_SET))
			onDuplicateFileSet();

		else if (command.equals(Command.DELETE_FILE_SET))
			onDeleteFileSet();

		else if (command.equals(Command.SCROLL_FILE_SET))
			onScrollFileSet();

		else if (command.equals(Command.GO_TO_FILE_SET_PREVIOUS))
			onGoToFileSetPrevious();

		else if (command.equals(Command.GO_TO_FILE_SET_NEXT))
			onGoToFileSetNext();

		else if (command.equals(Command.GO_TO_FILE_SET_START))
			onGoToFileSetStart();

		else if (command.equals(Command.GO_TO_FILE_SET_END))
			onGoToFileSetEnd();

		else if (command.equals(Command.MOVE_FILE_SET_UP))
			onMoveFileSetUp();

		else if (command.equals(Command.MOVE_FILE_SET_DOWN))
			onMoveFileSetDown();

		else if (command.equals(Command.ESCAPE_TARGET))
			onEscapeTarget();

		else if (command.equals(Command.ESCAPE_REPLACEMENT))
			onEscapeReplacement();

		else if (command.equals(Command.TOGGLE_REPLACE))
			onToggleReplace();

		else if (command.equals(Command.TOGGLE_REGEX))
			onToggleRegex();

		else if (command.equals(Command.SHOW_CONTEXT_MENU))
			onShowContextMenu();

		updateCommands();
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods : MouseListener interface
////////////////////////////////////////////////////////////////////////

	@Override
	public void mouseClicked(MouseEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	@Override
	public void mouseEntered(MouseEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	@Override
	public void mouseExited(MouseEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	@Override
	public void mousePressed(MouseEvent event)
	{
		showContextMenu(event);
	}

	//------------------------------------------------------------------

	@Override
	public void mouseReleased(MouseEvent event)
	{
		showContextMenu(event);
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods : PathnameField.IImportListener interface
////////////////////////////////////////////////////////////////////////

	@Override
	public void dataImported(PathnameField.ImportEvent event)
	{
		toFront();
		setPathname(pathnameEditor.getFile());
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods
////////////////////////////////////////////////////////////////////////

	public Dimension getInitialParameterEditorSize()
	{
		return initialParameterEditorSize;
	}

	//------------------------------------------------------------------

	public Dimension getParameterEditorSize()
	{
		return targetEditor.getTextAreaViewportSize();
	}

	//------------------------------------------------------------------

	public String getTargetString(boolean escape)
	{
		return targetEditor.getText(escape);
	}

	//------------------------------------------------------------------

	public boolean canAddFileSet()
	{
		return (getSearchParams().getNumFileSets() < SearchParameters.MAX_NUM_FILE_SETS);
	}

	//------------------------------------------------------------------

	public boolean isBeyondLastFileSet()
	{
		return (fileSetIndex > getMaxFileSetIndex());
	}

	//------------------------------------------------------------------

	public void updateComponents()
	{
		SearchParameters searchParams = getSearchParams();
		fileSetIndex = searchParams.getFileSetIndex();
		updateFileSetComponents();
		targetEditor.setItems(searchParams.getTargets());
		targetEditor.setIndex(searchParams.getTargetIndex());
		replacementEditor.setItems(searchParams.getReplacements());
		replacementEditor.setIndex(searchParams.getReplacementIndex());
		replaceCheckBox.setSelected(searchParams.isReplace());
		regexCheckBox.setSelected(searchParams.isRegex());
		ignoreCaseCheckBox.setSelected(searchParams.isIgnoreCase());
		showNotFoundCheckBox.setSelected(searchParams.isShowNotFound());
		enableComponents();
		updateCommands();
	}

	//------------------------------------------------------------------

	public void updateSearchParams()
	{
		updateFileSet();
		SearchParameters searchParams = getSearchParams();
		searchParams.setFileSetIndex(fileSetIndex);
		searchParams.setTargets(targetEditor.getItems());
		searchParams.setTargetIndex(targetEditor.getIndex());
		searchParams.setReplacements(replacementEditor.getItems());
		searchParams.setReplacementIndex(replacementEditor.getIndex());
		searchParams.setReplace(isReplace());
		searchParams.setRegex(isRegex());
		searchParams.setIgnoreCase(isIgnoreCase());
		searchParams.setShowNotFound(isShowNotFound());
	}

	//------------------------------------------------------------------

	public void updatePreferences()
	{
		AppConfig config = AppConfig.INSTANCE;
		char tabSurrogate = config.getTabSurrogate();
		int tabWidth = config.getTargetAndReplacementTabWidth();
		targetEditor.setTabSurrogate(tabSurrogate);
		targetEditor.setTabWidth(tabWidth);
		replacementEditor.setTabSurrogate(tabSurrogate);
		replacementEditor.setTabWidth(tabWidth);
		replacementEditor.setEscapeChar(config.getReplacementEscapeChar());
	}

	//------------------------------------------------------------------

	public void importFile()
	{
		if (isBeyondLastFileSet())
			onInsertFileSet();
		else
			onDuplicateFileSet();
		setPathname((File)AppCommand.IMPORT_FILE.getValue(AppCommand.Property.FILE));
	}

	//------------------------------------------------------------------

	public TextSearcher.Params getCurrentSearchParams()
		throws AppException
	{
		// Validate search parameters
		validateSearchParams();

		// Update parameter lists
		pathnameEditor.updateList();
		inclusionFilterEditor.updateList();
		exclusionFilterEditor.updateList();
		targetEditor.updateList();
		replacementEditor.updateList();

		// Set list of files
		TextSearcher.Params params = new TextSearcher.Params();
		switch (getFileSetKind())
		{
			case FILE:
			case DIRECTORY:
				params.files = Collections.singletonList(pathnameEditor.getFile());
				break;

			case LIST:
				params.files = readListFile(pathnameEditor.getFile());
				break;

			case RESULTS:
				params.files = mainWindow.getResultFiles();
				break;

			case CLIPBOARD:
				// do nothing
				break;
		}

		// Set filter patterns
		if (inclusionFilterEditor.isEnabled())
		{
			params.inclusionPatterns = inclusionFilterEditor.getPatterns();
			if (params.inclusionPatterns.isEmpty())
				params.inclusionPatterns.add(PathnameFilter.PATH_MULTIPLE_WILDCARD_STR);
		}

		if (exclusionFilterEditor.isEnabled())
			params.exclusionPatterns = exclusionFilterEditor.getPatterns();

		// Set target and replacement strings
		params.targetStr = getTargetString(isRegex());
		params.replacementStr = isReplace() ? getReplacementString() : null;

		// Set flags
		params.regex = isRegex();
		params.ignoreCase = isIgnoreCase();
		params.recordTargetNotFound = isShowNotFound();

		// Return parameters
		return params;
	}

	//------------------------------------------------------------------

	private void setPathname(File file)
	{
		pathnameEditor.setFile(file);
		switch (getFileSetKind())
		{
			case FILE:
			case LIST:
				if (file.isDirectory())
					fileSetKindComboBox.setSelectedItem(FileSet.Kind.DIRECTORY);
				break;

			case DIRECTORY:
				if (file.isFile())
					fileSetKindComboBox.setSelectedItem(FileSet.Kind.FILE);
				break;

			case RESULTS:
			case CLIPBOARD:
				// do nothing
				break;
		}
	}

	//------------------------------------------------------------------

	private boolean isScrolling()
	{
		return (scrollDirection != null);
	}

	//------------------------------------------------------------------

	private int getMaxFileSetIndex()
	{
		return (getSearchParams().getNumFileSets() - 1);
	}

	//------------------------------------------------------------------

	private FileSet getFileSet()
	{
		return getSearchParams().getFileSet(fileSetIndex);
	}

	//------------------------------------------------------------------

	private void updateFileSet()
	{
		if (!isBeyondLastFileSet())
		{
			FileSet fileSet = new FileSet((FileSet.Kind) fileSetKindComboBox.getSelectedItem(),
										  pathnameEditor.getItems(),
										  pathnameEditor.getIndex(),
										  inclusionFilterEditor.getItems(),
										  inclusionFilterEditor.getIndex(),
										  exclusionFilterEditor.getItems(),
										  exclusionFilterEditor.getIndex());
			getSearchParams().setFileSet(fileSetIndex, fileSet);
		}
	}

	//------------------------------------------------------------------

	private void updateFileSetComponents()
	{
		FileSet fileSet = getFileSet();
		boolean isFileSet = (fileSet != null);

		fileSetIndexField.setValues(fileSetIndex, getMaxFileSetIndex());
		fileSetKindComboBox.setSelectedItem(isFileSet ? fileSet.getKind() : null);
		pathnameEditor.setItems(isFileSet ? fileSet.getPathnames() : null);
		pathnameEditor.setIndex(isFileSet ? fileSet.getPathnameIndex() : -1);
		inclusionFilterEditor.setItems(isFileSet ? fileSet.getInclusionFilters() : null);
		inclusionFilterEditor.setIndex(isFileSet ? fileSet.getInclusionFilterIndex() : -1);
		exclusionFilterEditor.setItems(isFileSet ? fileSet.getExclusionFilters() : null);
		exclusionFilterEditor.setIndex(isFileSet ? fileSet.getExclusionFilterIndex() : -1);
	}

	//------------------------------------------------------------------

	/**
	 * Enables or disables components according to the current state.  After the components have been
	 * updated, an attempt is made to move the focus to the next focusable component if the current focus
	 * owner is disabled.
	 */

	private void enableComponents()
	{
		// Enable/disable components according to current state
		FileSet.Kind fileSetKind = getFileSetKind();
		boolean isFileSet = !isBeyondLastFileSet();
		boolean canAddFileSet = canAddFileSet();
		boolean notScrolling = !isScrolling();

		fileSetKindComboBox.setEnabled(isFileSet);
		pathnameEditor.setEnabled(canAddFileSet);
		duplicateFileSetButton.setEnabled(isFileSet && canAddFileSet);
		deleteFileSetButton.setEnabled(isFileSet);
		fileSetStartButton.setEnabled((fileSetIndex > 0) && notScrolling);
		fileSetPreviousButton.setEnabled(fileSetIndex > 0);
		fileSetNextButton.setEnabled(isFileSet);
		fileSetEndButton.setEnabled(isFileSet && notScrolling);
		pathnameEditor.setEnabled(isFileSet && fileSetKind.hasPathname());
		inclusionFilterEditor.setEnabled(isFileSet && fileSetKind.hasFilters());
		exclusionFilterEditor.setEnabled(isFileSet && fileSetKind.hasFilters());
		targetEditor.getEscapeButton().setEnabled(isRegex());
		replacementEditor.setEnabled(isReplace());
		replacementEditor.getEscapeButton().setEnabled(isReplace());

		// Move focus to next component if focus owner is disabled
		KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
		Component focusOwner = focusManager.getFocusOwner();
		if ((focusOwner != null) && !focusOwner.isEnabled())
			focusManager.focusNextComponent();
	}

	//------------------------------------------------------------------

	private void updateCommands()
	{
		mainWindow.updateCommands();
	}

	//------------------------------------------------------------------

	private void fileSetChanged()
	{
		updateFileSetComponents();
		enableComponents();
		updateCommands();
	}

	//------------------------------------------------------------------

	private FileSet.Kind getFileSetKind()
	{
		return (FileSet.Kind) fileSetKindComboBox.getSelectedItem();
	}

	//------------------------------------------------------------------

	private boolean isReplace()
	{
		return replaceCheckBox.isSelected();
	}

	//------------------------------------------------------------------

	private boolean isRegex()
	{
		return regexCheckBox.isSelected();
	}

	//------------------------------------------------------------------

	private boolean isIgnoreCase()
	{
		return ignoreCaseCheckBox.isSelected();
	}

	//------------------------------------------------------------------

	private boolean isShowNotFound()
	{
		return showNotFoundCheckBox.isSelected();
	}

	//------------------------------------------------------------------

	private String getReplacementString()
	{
		return replacementEditor.getText(true);
	}

	//------------------------------------------------------------------

	private void validateSearchParams()
		throws AppException
	{
		// Results ...
		FileSet.Kind fileSetKind = getFileSetKind();
		if (fileSetKind == FileSet.Kind.RESULTS)
		{
			if (mainWindow.getResultFiles().isEmpty())
				throw new AppException(ErrorId.NO_RESULTS);
		}

		// ... or pathname
		else
		{
			try
			{
				if (pathnameEditor.isEnabled() && pathnameEditor.isEmpty())
					throw new AppException(ErrorId.NO_PATHNAME);
				File file = pathnameEditor.getFile();
				switch (fileSetKind)
				{
					case FILE:
					case LIST:
						try
						{
							if (!file.isFile())
								throw new FileException(ErrorId.FILE_DOES_NOT_EXIST, file);
						}
						catch (SecurityException e)
						{
							throw new FileException(ErrorId.FILE_ACCESS_NOT_PERMITTED, file, e);
						}
						break;

					case DIRECTORY:
						try
						{
							if (!file.isDirectory())
								throw new FileException(ErrorId.DIRECTORY_DOES_NOT_EXIST, file);
						}
						catch (SecurityException e)
						{
							throw new FileException(ErrorId.DIRECTORY_ACCESS_NOT_PERMITTED, file, e);
						}
						break;

					case RESULTS:
					case CLIPBOARD:
						// do nothing
						break;
				}
			}
			catch (AppException e)
			{
				GuiUtils.setFocus(pathnameEditor);
				throw e;
			}
		}

		// Target string
		String targetStr = null;
		try
		{
			targetStr = getTargetString(isRegex());
			if (StringUtils.isNullOrEmpty(targetStr))
				throw new AppException(ErrorId.NO_TARGET);
		}
		catch (AppException e)
		{
			GuiUtils.setFocus(targetEditor);
			throw e;
		}
		if (isRegex())
		{
			try
			{
				int flags = Pattern.MULTILINE | Pattern.UNIX_LINES;
				if (isIgnoreCase())
					flags |= Pattern.CASE_INSENSITIVE;
				Pattern.compile(targetStr, flags);
			}
			catch (PatternSyntaxException e)
			{
				targetEditor.requestFocusInWindow();
				int index = e.getIndex();
				if (index >= 0)
					targetEditor.setCaretPosition(index);
				throw new TextSearcher.SyntaxException(ErrorId.MALFORMED_REGULAR_EXPRESSION,
													   RegexUtils.getExceptionMessage(e));
			}
		}

		// Replacement string
		if (isReplace())
		{
			try
			{
				TextSearcher.createReplacementString(getReplacementString(), null, isRegex());
			}
			catch (TextSearcher.SyntaxException e)
			{
				replacementEditor.requestFocusInWindow();
				int index = e.getIndex();
				if (index >= 0)
					replacementEditor.setCaretPosition(index);
				throw e;
			}
		}
	}

	//------------------------------------------------------------------

	private void showContextMenu(MouseEvent event)
	{
		mainWindow.showContextMenu(event, getContentPane());
	}

	//------------------------------------------------------------------

	private void stopScrolling()
	{
		scrollTimer.stop();
		scrollDirection = null;
		enableComponents();
	}

	//------------------------------------------------------------------

	private void onSelectFileSetKind()
	{
		enableComponents();
	}

	//------------------------------------------------------------------

	private void onInsertFileSet()
	{
		updateFileSet();
		getSearchParams().addFileSet(fileSetIndex, new FileSet());
		fileSetChanged();
	}

	//------------------------------------------------------------------

	private void onDuplicateFileSet()
	{
		updateFileSet();
		getSearchParams().addFileSet(fileSetIndex, getFileSet());
		++fileSetIndex;
		fileSetChanged();
	}

	//------------------------------------------------------------------

	private void onDeleteFileSet()
	{
		String[] optionStrs = Utils.getOptionStrings(DELETE_STR);
		if (JOptionPane.showOptionDialog(this, DELETE_MESSAGE_STR, DELETE_FILE_SET_STR, JOptionPane.OK_CANCEL_OPTION,
										 JOptionPane.QUESTION_MESSAGE, null, optionStrs, optionStrs[1])
																							== JOptionPane.OK_OPTION)
		{
			getSearchParams().removeFileSet(fileSetIndex);
			if (isBeyondLastFileSet() && (fileSetIndex > 0))
				--fileSetIndex;
			fileSetChanged();
		}
	}

	//------------------------------------------------------------------

	private void onScrollFileSet()
	{
		switch (scrollDirection)
		{
			case BACKWARD:
				if (moveFileSet)
					onMoveFileSetUp();
				else
					onGoToFileSetPrevious();
				break;

			case FORWARD:
				if (moveFileSet)
					onMoveFileSetDown();
				else
					onGoToFileSetNext();
				break;
		}
	}

	//------------------------------------------------------------------

	private void onGoToFileSetPrevious()
	{
		if (fileSetIndex > 0)
		{
			updateFileSet();
			--fileSetIndex;
			fileSetChanged();
			if (fileSetIndex <= 0)
				stopScrolling();
		}
	}

	//------------------------------------------------------------------

	private void onGoToFileSetNext()
	{
		int maxIndex = getMaxFileSetIndex();
		if (fileSetIndex <= maxIndex)
		{
			updateFileSet();
			++fileSetIndex;
			fileSetChanged();
			if (fileSetIndex > maxIndex)
				stopScrolling();
		}
	}

	//------------------------------------------------------------------

	private void onGoToFileSetStart()
	{
		if (fileSetIndex > 0)
		{
			updateFileSet();
			fileSetIndex = 0;
			fileSetChanged();
		}
	}

	//------------------------------------------------------------------

	private void onGoToFileSetEnd()
	{
		int maxIndex = getMaxFileSetIndex();
		if (fileSetIndex <= maxIndex)
		{
			updateFileSet();
			fileSetIndex = maxIndex + 1;
			fileSetChanged();
		}
	}

	//------------------------------------------------------------------

	private void onMoveFileSetUp()
	{
		if ((fileSetIndex > 0) && !isBeyondLastFileSet())
		{
			updateFileSet();
			SearchParameters searchParams = getSearchParams();
			FileSet fileSet = searchParams.removeFileSet(fileSetIndex);
			--fileSetIndex;
			searchParams.addFileSet(fileSetIndex, fileSet);
			fileSetChanged();
			if (fileSetIndex <= 0)
				stopScrolling();
		}
	}

	//------------------------------------------------------------------

	private void onMoveFileSetDown()
	{
		int maxIndex = getMaxFileSetIndex();
		if (fileSetIndex <= maxIndex)
		{
			updateFileSet();
			if (fileSetIndex < maxIndex)
			{
				SearchParameters searchParams = getSearchParams();
				FileSet fileSet = searchParams.removeFileSet(fileSetIndex);
				++fileSetIndex;
				searchParams.addFileSet(fileSetIndex, fileSet);
			}
			fileSetChanged();
			if (fileSetIndex > maxIndex)
				stopScrolling();
		}
	}

	//------------------------------------------------------------------

	private void onEscapeTarget()
	{
		if (isRegex())
			targetEditor.setText(StringUtils.escape(targetEditor.getText(),
													AppConfig.INSTANCE.getEscapedMetacharacters()));
	}

	//------------------------------------------------------------------

	private void onEscapeReplacement()
	{
		String str = replacementEditor.getText();
		String escapePrefix = Character.toString(AppConfig.INSTANCE.getReplacementEscapeChar());
		replacementEditor.setText(str.replace(escapePrefix, escapePrefix + escapePrefix));
	}

	//------------------------------------------------------------------

	private void onToggleReplace()
	{
		enableComponents();
	}

	//------------------------------------------------------------------

	private void onToggleRegex()
	{
		enableComponents();
	}

	//------------------------------------------------------------------

	private void onShowContextMenu()
	{
		showContextMenu(null);
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance fields
////////////////////////////////////////////////////////////////////////

	private	Dimension				initialParameterEditorSize;
	private	ScrollDirection			scrollDirection;
	private	boolean					moveFileSet;
	private	int						fileSetIndex;
	private	Timer					scrollTimer;
	private	MainWindow				mainWindow;
//	private	FComboBox<FileSet.Kind>	fileSetKindComboBox;
//	private	JButton					insertFileSetButton;
//	private	JButton					duplicateFileSetButton;
//	private	JButton					deleteFileSetButton;
//	private	FileSetButton			fileSetStartButton;
//	private	FileSetButton			fileSetEndButton;
//	private	FileSetButton			fileSetPreviousButton;
//	private	FileSetButton			fileSetNextButton;
	private	FileSetIndexField		fileSetIndexField;
	private	PathnameEditor			pathnameEditor;
	private	FilterEditor			inclusionFilterEditor;
	private	FilterEditor			exclusionFilterEditor;
	private	ParameterEditor			targetEditor;
	private	ParameterEditor			replacementEditor;
	private	JCheckBox				replaceCheckBox;
	private	JCheckBox				regexCheckBox;
	private	JCheckBox				ignoreCaseCheckBox;
	private	JCheckBox				showNotFoundCheckBox;
        
        
        
        
        
        ////////////////////////////////////////////////////////////////////////
//  Constants
////////////////////////////////////////////////////////////////////////

	public static final		int	HIGHLIGHT_MARGIN_ROWS		= 4;
	public static final		int	HIGHLIGHT_MARGIN_COLUMNS	= 8;

	private static final	String	SEARCHING_STR				= "Searching ";
	private static final	String	OPEN_SEARCH_PARAMS_STR		= "Open search parameters";
	private static final	String	SAVE_SEARCH_PARAMS_STR		= "Save search parameters";
	private static final	String	WRITE_SEARCH_PARAMS_STR		= "Write search parameters";
	private static final	String	SAVE_STR					= "Save";
	private static final	String	DISCARD_STR					= "Discard";
	private static final	String	SAVE_MESSAGE_STR			= "The search parameters have changed.\nDo you want to "
																	+ "save the current search parameters?";
	private static final	String	TARGET_NOT_FOUND_STR		= "Files in which the target was not found";
	private static final	String	UNPROCESSED_STR				= "Unprocessed files or directories";
	private static final	String	NO_CANONICAL_PATHNAME_STR	= "Failed to get canonical pathname";
	private static final	String	PROCESSING_ERROR_STR		= "Error processing file or directory";
	private static final	String	ATTRIBUTES_NOT_SET_STR		= "File attributes not set";

	private static final	char	TAB_GLYPH_CHAR	= '\u2192';

	private interface Command2
	{
		String	SHOW_CONTEXT_MENU	= "showContextMenu";
	}

////////////////////////////////////////////////////////////////////////
//  Enumerated types
////////////////////////////////////////////////////////////////////////


	// MENUS


	private enum Menu
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		FILE
		(
			"File",
			KeyEvent.VK_F
		)
		{
			protected void update()
			{
				getWindow().updateCommands();
			}
		},

		EDIT
		(
			"Edit",
			KeyEvent.VK_E
		)
		{
			protected void update()
			{
				getWindow().updateCommands();
			}
		},

		SEARCH
		(
			"Search",
			KeyEvent.VK_S
		)
		{
			protected void update()
			{
				getMenu().setEnabled(!getWindow().searching);
				getWindow().updateCommands();
			}
		},

		VIEW
		(
			"View",
			KeyEvent.VK_V
		)
		{
			protected void update()
			{
				getWindow().updateCommands();
			}
		},

		OPTIONS
		(
			"Options",
			KeyEvent.VK_O
		)
		{
			protected void update()
			{
				getMenu().setEnabled(!getWindow().searching);
				getWindow().updateCommands();
			}
		};

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private Menu(String text,
					 int    keyCode)
		{
			menu = new FMenu(text, keyCode);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Abstract methods
	////////////////////////////////////////////////////////////////////

		protected abstract void update();

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods
	////////////////////////////////////////////////////////////////////

		protected JMenu getMenu()
		{
			return menu;
		}

		//--------------------------------------------------------------

		protected MainWindow getWindow()
		{
			return App.INSTANCE.getMainWindow();
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	JMenu	menu;

	}

	//==================================================================


	// ERROR IDENTIFIERS


	private enum ErrorId2
		implements AppException.IId
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		NO_EDITOR_COMMAND
		("No editor command is defined."),

		FAILED_TO_EXECUTE_EDITOR_COMMAND
		("Failed to execute the editor command.");

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ErrorId2(String message)
		{
			this.message = message;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : AppException.IId interface
	////////////////////////////////////////////////////////////////////

		public String getMessage()
		{
			return message;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	String	message;

	}

	//==================================================================

////////////////////////////////////////////////////////////////////////
//  Member classes : non-inner classes
////////////////////////////////////////////////////////////////////////


	// SCROLL PANE CLASS


	private static class ScrollPane
		extends JScrollPane
		implements ChangeListener
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int	VERTICAL_MARGIN		= 2;
		private static final	int	HORIZONTAL_MARGIN	= 4;

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ScrollPane(TextArea textArea)
		{
			// Call superclass constructor
			super(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				  JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

			// Initialise instance fields
			this.textArea = textArea;

			// Set viewport in text area
			textArea.setViewport(getViewport());

			// Set component attributes
			setBackground(AppConfig.INSTANCE.getTextAreaBackgroundColour());
			setCorner(JScrollPane.LOWER_RIGHT_CORNER, new JPanel());
			GuiUtils.setViewportBorder(this, VERTICAL_MARGIN, HORIZONTAL_MARGIN);
			getViewport().setBackground(AppConfig.INSTANCE.getTextAreaBackgroundColour());
			getViewport().setFocusable(false);
			getVerticalScrollBar().setFocusable(false);
			getHorizontalScrollBar().setFocusable(false);

			// Add listeners
			getVerticalScrollBar().getModel().addChangeListener(this);
			getHorizontalScrollBar().getModel().addChangeListener(this);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : ChangeListener interface
	////////////////////////////////////////////////////////////////////

		public void stateChanged(ChangeEvent event)
		{
			// Update viewport position if neither scroll bar knob is being dragged
			if (!getVerticalScrollBar().getValueIsAdjusting() &&
				 !getHorizontalScrollBar().getValueIsAdjusting())
				textArea.snapViewPosition();
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	TextArea	textArea;

	}

	//==================================================================


	// RESULT AREA CLASS


	private static class ResultArea
		extends TextArea
		implements MouseMotionListener
	{

	////////////////////////////////////////////////////////////////////
	//  Constants
	////////////////////////////////////////////////////////////////////

		private static final	int	MAX_NUM_COLUMNS	= 1024;

	////////////////////////////////////////////////////////////////////
	//  Constructors
	////////////////////////////////////////////////////////////////////

		private ResultArea(int columns,
						   int rows)
		{
			// Call superclass constructor
			super(columns, rows, MAX_NUM_COLUMNS, AppFont.RESULT_AREA.getFont());

			// Initialise instance fields
			selectedIndex = -1;

			// Add listeners
			addMouseMotionListener(this);
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : MouseMotionListener interface
	////////////////////////////////////////////////////////////////////

		public void mouseDragged(MouseEvent event)
		{
			if (SwingUtilities.isLeftMouseButton(event) && (selectedIndex >= 0))
			{
				int index = getIndex(event);
				if ((index == selectedIndex) != armed)
				{
					armed = !armed;
					((ResultList)getModel()).setElementSelected(selectedIndex, armed);
					repaint();
				}
			}
		}

		//--------------------------------------------------------------

		public void mouseMoved(MouseEvent event)
		{
			// do nothing
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods : overriding methods
	////////////////////////////////////////////////////////////////////

		@Override
		public void mousePressed(MouseEvent event)
		{
			super.mousePressed(event);

			if (SwingUtilities.isLeftMouseButton(event) && event.isControlDown())
			{
				int index = getIndex(event);
				if (index >= 0)
				{
					ResultList resultList = (ResultList)getModel();
					String pathname = resultList.getSearchedPathname(index);
					if (pathname != null)
					{
						resultList.setElementSelected(index, true);
						repaint();
						selectedIndex = index;
						armed = true;
					}
				}
			}
		}

		//--------------------------------------------------------------

		@Override
		public void mouseReleased(MouseEvent event)
		{
			if (SwingUtilities.isLeftMouseButton(event) && (selectedIndex >= 0))
			{
				ResultList resultList = (ResultList)getModel();
				int index = getIndex(event);
				if ((index == selectedIndex) && armed)
				{
					try
					{
						editFile(resultList.getSearchedPathname(index));
					}
					catch (AppException e)
					{
						App.INSTANCE.showErrorMessage(App.SHORT_NAME, e);
					}
				}

				resultList.setElementSelected(selectedIndex, false);
				repaint();
				selectedIndex = -1;
				armed = false;
			}
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance methods
	////////////////////////////////////////////////////////////////////

		private int getIndex(MouseEvent event)
		{
			int index = -1;
			int x = event.getX();
			if ((x >= 0) && (x < getWidth()))
			{
				int row = event.getY() / getRowHeight();
				ResultList resultList = (ResultList)getModel();
				if ((row >= 0) && (row < resultList.getNumLines()))
				{
					String pathname = resultList.getSearchedPathname(row);
					if ((pathname != null) && (x < getFontMetrics(getFont()).stringWidth(pathname)))
						 index = row;
				}
			}
			return index;
		}

		//--------------------------------------------------------------

	////////////////////////////////////////////////////////////////////
	//  Instance fields
	////////////////////////////////////////////////////////////////////

		private	int		selectedIndex;
		private	boolean	armed;

	}

	//==================================================================

////////////////////////////////////////////////////////////////////////
//  Constructors
////////////////////////////////////////////////////////////////////////

//	public MainWindow2()
//	{
//
//
//
//	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Class methods
////////////////////////////////////////////////////////////////////////

	private static SearchParameters getSearchParams2()
	{
		return App.INSTANCE.getSearchParams();
	}

	//------------------------------------------------------------------

	private static void setTextAreaColours(TextArea textArea)
	{
		AppConfig config = AppConfig.INSTANCE;
		textArea.setForeground(config.getTextAreaTextColour());
		textArea.setBackground(config.getTextAreaBackgroundColour());
		textArea.setHighlightTextColour(config.getTextAreaHighlightTextColour());
		textArea.setHighlightBackgroundColour(config.getTextAreaHighlightBackgroundColour());
	}

	//------------------------------------------------------------------

	private static void editFile(String pathname)
		throws AppException
	{
		final	char	ESCAPE_CHAR					= '%';
		final	char	PATHNAME_PLACEHOLDER_CHAR	= 'f';

		// Parse editor command to create list of arguments
		String command = AppConfig.INSTANCE.getEditorCommand();
		if (StringUtils.isNullOrEmpty(command))
			throw new AppException(ErrorId2.NO_EDITOR_COMMAND);

		List<String> arguments = new ArrayList<>();
		StringBuilder buffer = new StringBuilder();
		int index = 0;
		while (index < command.length())
		{
			char ch = command.charAt(index++);
			switch (ch)
			{
				case ESCAPE_CHAR:
					if (index < command.length())
					{
						ch = command.charAt(index++);
						if (ch == PATHNAME_PLACEHOLDER_CHAR)
							buffer.append(pathname);
						else
							buffer.append(ch);
					}
					break;

				case ' ':
					if (buffer.length() > 0)
					{
						arguments.add(PropertyString.parsePathname(buffer.toString()));
						buffer.setLength(0);
					}
					break;

				default:
					buffer.append(ch);
					break;
			}
		}
		if (buffer.length() > 0)
			arguments.add(PropertyString.parsePathname(buffer.toString()));

		// Execute editor command
		try
		{
			new ProcessBuilder(arguments).start();
		}
		catch (IOException e)
		{
			throw new AppException(ErrorId2.FAILED_TO_EXECUTE_EDITOR_COMMAND, e);
		}
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods : ActionListener interface
////////////////////////////////////////////////////////////////////////

	public void actionPerformed2(ActionEvent event)
	{
		String command = event.getActionCommand();

		if (command.equals(Command2.SHOW_CONTEXT_MENU))
			onShowContextMenu2();

		updateCommands();
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods : MenuListener interface
////////////////////////////////////////////////////////////////////////

	public void menuCanceled(MenuEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	public void menuDeselected(MenuEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	public void menuSelected(MenuEvent event)
	{
		Object eventSource = event.getSource();
		for (Menu menu : Menu.values())
		{
			if (eventSource == menu.menu)
				menu.update();
		}
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods : MouseListener interface
////////////////////////////////////////////////////////////////////////

	public void mouseClicked2(MouseEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	public void mouseEntered2(MouseEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	public void mouseExited2(MouseEvent event)
	{
		// do nothing
	}

	//------------------------------------------------------------------

	public void mousePressed2(MouseEvent event)
	{
		showContextMenu2(event);
	}

	//------------------------------------------------------------------

	public void mouseReleased2(MouseEvent event)
	{
		showContextMenu2(event);
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance methods
////////////////////////////////////////////////////////////////////////

	public TextModel getTextModel()
	{
		return textModel;
	}

	//------------------------------------------------------------------

	public ControlDialog getControlDialog()
	{
		return controlDialog;
	}

	//------------------------------------------------------------------

	public void openControlDialog()
	{
		//if (controlDialog == null)
			//controlDialog = ControlDialog.showDialog(this);
	}

	//------------------------------------------------------------------

	public void initTextModel(File         file,
							  StringBuffer text,
							  boolean      visible)
	{
		// Perform any deferred edit
		deferredEdit();

		// Initialise text model
		textModel = new TextModel(file, text, TAB_GLYPH_CHAR);

		// Set model in text view and update window title
		if (visible)
		{
			textView.setModel(textModel);
			textModel.addChangeListener(textView);

			currentPathname = (file == null)
								? AppConstants.CLIPBOARD_STR
								: Utils.getPathname(file, AppConfig.INSTANCE.isShowUnixPathnames());
			updateTitle();
		}
		else
		{
			textView.setModel(null);

			if (currentPathname != null)
			{
				currentPathname = null;
				updateTitle();
			}
		}
	}

	//------------------------------------------------------------------

	public void makeTextSelectionViewable()
	{
		if (textView.getModel() != null)
		{
			// Get selection from text model
			TextModel.Selection selection = textModel.getSelection();

			// Get x coordinate of view
			TextArea.Line[] lines = textModel.getLines(selection.startRow, selection.startRow + 1);
			int selectionX =
						(lines.length == 0)
							? 0
							: textView.getFontMetrics(textView.getFont()).
								stringWidth(lines[0].text.substring(0, lines[0].highlightStartOffset));
			int verticalMargin = HIGHLIGHT_MARGIN_COLUMNS * textView.getColumnWidth();
			int x = Math.min(Math.max(0, selectionX + verticalMargin -
																	textView.getViewport().getWidth()),
							 textView.getMaximumX());

			// Get y coordinate of view
			int numRows = textView.getRows();
			int maxRowIndex = Math.max(0, textModel.getNumLines() - numRows);
			int startRow = textView.getViewport().getViewPosition().y / textView.getRowHeight();
			if ((selection.startRow < startRow + HIGHLIGHT_MARGIN_ROWS) ||
				 (selection.endRow >= startRow + numRows - HIGHLIGHT_MARGIN_ROWS))
				startRow = Math.min(Math.max(0, selection.startRow - HIGHLIGHT_MARGIN_ROWS),
									maxRowIndex);
			int y = startRow * textView.getRowHeight();

			// Set view position
			textView.setViewPosition(x, y);
		}
	}

	//------------------------------------------------------------------

	public List<File> getResultFiles()
	{
		return getResultList().getFiles();
	}

	//------------------------------------------------------------------

	public void appendResult(TextSearcher.FileResult result)
	{
		getResultList().addFile(result);
		updateResultAreaViewPosition();
	}

	//------------------------------------------------------------------

	public void searchDialogClosed(TextSearcher.Option option)
	{
		if (searchDialog != null)
		{
			searchDialog = null;
			search(new Task.ResumeSearch(option));
		}
	}

	//------------------------------------------------------------------

	public void executeCommand(AppCommand command)
	{
		try
		{
			switch (command)
			{
				case IMPORT_FILE:
					onImportFile();
					break;

				case OPEN_SEARCH_PARAMETERS:
					onOpenSearchParams();
					break;

				case SAVE_SEARCH_PARAMETERS:
					onSaveSearchParams();
					break;

				case EXIT:
					onExit();
					break;

				case EDIT_FILE:
					onEditFile();
					break;

				case EDIT_FILE_DEFERRED:
					onEditFileDeferred();
					break;

				case SEARCH:
					onSearch();
					break;

				case COPY_RESULTS:
					onCopyResults();
					break;

				case SAVE_RESULTS:
					onSaveResults();
					break;

				case VIEW_SAVED_RESULTS:
					onViewSavedResults();
					break;

				case TOGGLE_CONTROL_DIALOG:
					onToggleControlDialog();
					break;

				case EDIT_PREFERENCES:
					onEditPreferences();
					break;
			}
		}
		catch (AppException e)
		{
			App.INSTANCE.showErrorMessage(App.SHORT_NAME, e);
		}

		updateCommands();
	}

	//------------------------------------------------------------------

	public void updateCommands2()
	{
		boolean isFileSet = (controlDialog != null) && !controlDialog.isBeyondLastFileSet();
		boolean canEdit = (textModel != null) && (textModel.getFile() != null) &&
						  (currentPathname != null) &&
						  (AppConfig.INSTANCE.getEditorCommand() != null);

		AppCommand.IMPORT_FILE.setEnabled(isFileSet);
		AppCommand.OPEN_SEARCH_PARAMETERS.setEnabled(!searching);
		AppCommand.SAVE_SEARCH_PARAMETERS.setEnabled(!searching);
		AppCommand.EXIT.setEnabled(true);
		AppCommand.EDIT_FILE.setEnabled(canEdit);
		AppCommand.EDIT_FILE_DEFERRED.setEnabled(canEdit && (deferredFile == null) && searching &&
												  (searchKind == SearchDialog.Kind.REPLACE));
		AppCommand.SEARCH.setEnabled(isFileSet && !searching);
		AppCommand.COPY_RESULTS.setEnabled(!searching && !getResultList().isEmpty());
		AppCommand.SAVE_RESULTS.setEnabled(!searching && getResultList().isSearchedFiles());
		AppCommand.VIEW_SAVED_RESULTS.setEnabled(!searching && !getResultList().getFiles().isEmpty());
		AppCommand.TOGGLE_CONTROL_DIALOG.setEnabled(true);
		AppCommand.TOGGLE_CONTROL_DIALOG.setName(((controlDialog != null) && controlDialog.isVisible())
																	? AppCommand.HIDE_CONTROL_DIALOG_STR
																	: AppCommand.SHOW_CONTROL_DIALOG_STR);
		AppCommand.EDIT_PREFERENCES.setEnabled(!searching);
	}

	//------------------------------------------------------------------

	public void showContextMenu(MouseEvent event,
								Component  component)
	{
		if ((event == null) || event.isPopupTrigger())
		{
			// Create context menu
			if (contextMenu == null)
			{
				contextMenu = new JPopupMenu();

				contextMenu.add(new FMenuItem(AppCommand.SEARCH));

				contextMenu.addSeparator();

				contextMenu.add(new FMenuItem(AppCommand.TOGGLE_CONTROL_DIALOG));

				contextMenu.addSeparator();

				contextMenu.add(new FMenuItem(AppCommand.EDIT_FILE));
				contextMenu.add(new FMenuItem(AppCommand.EDIT_FILE_DEFERRED));

				contextMenu.addSeparator();

				contextMenu.add(new FMenuItem(AppCommand.COPY_RESULTS));
				contextMenu.add(new FMenuItem(AppCommand.SAVE_RESULTS));
				contextMenu.add(new FMenuItem(AppCommand.VIEW_SAVED_RESULTS));

				contextMenu.addSeparator();

				contextMenu.add(new FMenuItem(AppCommand.EDIT_PREFERENCES));
			}

			// Update commands for menu items
			updateCommands2();

			// Display menu
			if (event == null)
				contextMenu.show(component, 0, 0);
			else
				contextMenu.show(event.getComponent(), event.getX(), event.getY());
		}
	}

	//------------------------------------------------------------------

	private void showContextMenu2(MouseEvent event)
	{
		showContextMenu(event, textView);
	}

	//------------------------------------------------------------------

	private ResultList getResultList()
	{
		return (ResultList)resultArea.getModel();
	}

	//------------------------------------------------------------------

	private void updateTitle()
	{
		setTitle((currentPathname == null) ? App.LONG_NAME + " " : App.SHORT_NAME + " - " + currentPathname);
	}

	//------------------------------------------------------------------

	private void updateResultAreaViewPosition()
	{
		int y = Math.max(0, getResultList().getNumLines() - resultArea.getRows()) * resultArea.getRowHeight();
		resultArea.setViewPosition(0, y);
	}

	//------------------------------------------------------------------

	private void showSearchDialog(SearchDialog.Kind dialogKind)
	{
		searchDialog = SearchDialog.showDialog(controlDialog, dialogKind, controlDialog.getTargetString(true),
											   currentPathname, textModel.getSelection().startRow,
											   textModel.getSelectionStart(), textModel.getSelectionEnd());
	}

	//------------------------------------------------------------------

	private boolean closeSearchParams()
	{
		// Update search parameters
		controlDialog.updateSearchParams();

		// Prompt to save search parameters
		SearchParameters searchParams = getSearchParams();
		if ((searchParams.getFile() != null) && searchParams.isChanged())
		{
			String[] optionStrs = Utils.getOptionStrings(SAVE_STR, DISCARD_STR);
			int result = JOptionPane.showOptionDialog(this, SAVE_MESSAGE_STR, App.SHORT_NAME,
													  JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
													  null, optionStrs, optionStrs[0]);
			if (result == JOptionPane.YES_OPTION)
				searchParams.write();
			else if (result != JOptionPane.NO_OPTION)
				return false;
		}
		return true;
	}

	//------------------------------------------------------------------

	private File chooseOpen()
	{
		if (openFileChooser == null)
		{
			openFileChooser = new JFileChooser(getSearchParams().getFile());
			openFileChooser.setDialogTitle(OPEN_SEARCH_PARAMS_STR);
			openFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			openFileChooser.setFileFilter(new FilenameSuffixFilter(AppConstants.XML_FILES_STR,
																   AppConstants.XML_FILE_SUFFIX));
		}
		openFileChooser.rescanCurrentDirectory();
		return ((openFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
																		? openFileChooser.getSelectedFile()
																		: null);
	}

	//------------------------------------------------------------------

	private File chooseSave(File file)
	{
		if (saveFileChooser == null)
		{
			saveFileChooser = new JFileChooser(getSearchParams().getFile());
			saveFileChooser.setDialogTitle(SAVE_SEARCH_PARAMS_STR);
			saveFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			saveFileChooser.setFileFilter(new FilenameSuffixFilter(AppConstants.XML_FILES_STR,
																   AppConstants.XML_FILE_SUFFIX));
		}
		saveFileChooser.setSelectedFile((file == null) ? new File("") : file);
		saveFileChooser.rescanCurrentDirectory();
		return ((saveFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
								? Utils.appendSuffix(saveFileChooser.getSelectedFile(), AppConstants.XML_FILE_SUFFIX)
								: null);
	}

	//------------------------------------------------------------------

	private void search(Task task)
	{
		// Perform search
		TextSearcher textSearcher = App.INSTANCE.getTextSearcher();
		try
		{
			// Hide control dialog
			if (controlDialog.isVisible() && AppConfig.INSTANCE.isHideControlDialogWhenSearching())
			{
				controlDialog.setVisible(false);
				controlDialogHidden = true;
			}

			// Update commands for search in progress
			searching = true;
			updateCommands2();

			// Display search progress dialog
			TaskProgressDialog.showDialog(this, SEARCHING_STR + AppConstants.ELLIPSIS_STR, task);

			// Bring window to front
			toFront();

			// Display dialog of search options
			switch (textSearcher.getStopSubstate())
			{
				case MATCH:
					showSearchDialog(searchKind);
					break;

				case PREVIEW:
					showSearchDialog(SearchDialog.Kind.PREVIEW);
					break;

				case DONE:
					// do nothing
					break;
			}
		}
		catch (AppException e)
		{
			App.INSTANCE.showErrorMessage(App.SHORT_NAME, e);
		}

		// Update results at end of search
		if (searchDialog == null)
		{
			// Indicate end of search
			searching = false;

			// Show control dialog
			if (controlDialogHidden && !controlDialog.isVisible())
				controlDialog.setVisible(true);

			// Perform any deferred edit
			deferredEdit();

			// Update results with aggregate result
			ResultList resultList = getResultList();
			resultList.addAggregate(textSearcher.getAggregateResult());

			// Update results with files in which the target was not found
			List<File> files = textSearcher.getTargetNotFoundFiles();
			if (!files.isEmpty())
				resultList.addFiles(TARGET_NOT_FOUND_STR, files, true);

			// Update results with erroneous pathnames
			files = PathnameFilter.getErrors();
			if (!files.isEmpty())
				resultList.addFiles(UNPROCESSED_STR + ": " + NO_CANONICAL_PATHNAME_STR, files, false);

			// Update results with unprocessed files
			files = textSearcher.getUnprocessedFiles();
			if (!files.isEmpty())
				resultList.addFiles(UNPROCESSED_STR + ": " + PROCESSING_ERROR_STR, files, true);

			// Update results with files whose attributes were not set
			files = textSearcher.getAttributesNotSetFiles();
			if (!files.isEmpty())
				resultList.addFiles(UNPROCESSED_STR + ": " + ATTRIBUTES_NOT_SET_STR, files, true);

			// Update result area
			updateResultAreaViewPosition();

			// Update commands
			updateCommands2();
		}
	}

	//------------------------------------------------------------------

	private void deferredEdit()
	{
		if (textModel != null)
		{
			File file = textModel.getFile();
			if ((file != null) && (file == deferredFile))
			{
				try
				{
					deferredFile = null;
					onEditFile();
				}
				catch (AppException e)
				{
					App.INSTANCE.showErrorMessage(App.SHORT_NAME, e);
				}
			}
		}
	}

	//------------------------------------------------------------------

	private void updateConfiguration()
	{
		// Set configuration properties
		AppConfig config = AppConfig.INSTANCE;
		Dimension size = controlDialog.getParameterEditorSize();
		if (!controlDialog.getInitialParameterEditorSize().equals(size))
		{
			size.width = Math.min(Math.max(ParameterEditor.MIN_NUM_COLUMNS, size.width),
								  ParameterEditor.MAX_NUM_COLUMNS);
			size.height = Math.min(Math.max(ParameterEditor.MIN_NUM_ROWS, size.height), ParameterEditor.MAX_NUM_ROWS);
			config.setParameterEditorSize(size);
		}

		// Save location of main window and control dialog
		if (config.isMainWindowLocation())
		{
			Point location = GuiUtils.getFrameLocation(this);
			if (location != null)
				config.setMainWindowLocation(location);

			controlDialog.setVisible(true);
			location = controlDialog.getLocationOnScreen();
			if (location != null)
				config.setControlDialogLocation(location);
		}

		// Write configuration
		config.write();
	}

	//------------------------------------------------------------------

	private void onShowContextMenu2()
	{
		showContextMenu(null);
	}

	//------------------------------------------------------------------

	private void onImportFile()
	{
		controlDialog.importFile();
	}

	//------------------------------------------------------------------

	private void onOpenSearchParams()
		throws AppException
	{
		// Prompt to save search parameters
		if (!closeSearchParams())
			return;

		// Choose file
		File file = chooseOpen();

		// Open file
		if (file != null)
			App.INSTANCE.openSearchParams(file);

		// Update components of control dialog
		controlDialog.updateComponents();
	}

	//------------------------------------------------------------------

	private void onSaveSearchParams()
		throws AppException
	{
		// Update search parameters
		controlDialog.updateSearchParams();

		// Choose file
		SearchParameters searchParams = getSearchParams();
		File file = chooseSave(searchParams.getFile());

		// Write file
		String[] optionStrs = Utils.getOptionStrings(AppConstants.REPLACE_STR);
		if ((file != null)
			&& (!file.exists()
				|| (JOptionPane.showOptionDialog(this, Utils.getPathname(file) + AppConstants.ALREADY_EXISTS_STR,
												 SAVE_SEARCH_PARAMS_STR, JOptionPane.OK_CANCEL_OPTION,
												 JOptionPane.WARNING_MESSAGE, null, optionStrs, optionStrs[1])
																							== JOptionPane.OK_OPTION)))
			TaskProgressDialog.showDialog(this, WRITE_SEARCH_PARAMS_STR,
										  new Task.WriteSearchParams(searchParams, file));
	}

	//------------------------------------------------------------------

	private void onExit()
	{
		// Prompt to save search parameters
		if (!closeSearchParams())
			return;

		// Update configuration
		updateConfiguration();

		// Close window and exit
		setVisible(false);
		dispose();
		System.exit(0);
	}

	//------------------------------------------------------------------

	private void onEditFile()
		throws AppException
	{
		if (textModel != null)
		{
			File file = textModel.getFile();
			if (file != null)
				editFile(file.getPath());
		}
	}

	//------------------------------------------------------------------

	private void onEditFileDeferred()
	{
		if (textModel != null)
			deferredFile = textModel.getFile();
	}

	//------------------------------------------------------------------

	private void onSearch()
		throws AppException
	{
		// Get search parameters from control dialog
		TextSearcher.Params params = controlDialog.getCurrentSearchParams();

		// Set search kind
		searchKind = (params.replacementStr == null) ? SearchDialog.Kind.FIND : SearchDialog.Kind.REPLACE;

		// Clear result area
		resultArea.setText(null);

		// Reset text model
		initTextModel(null, null, false);

		// Start search
		controlDialogHidden = false;
		search(new Task.StartSearch(params));
	}

	//------------------------------------------------------------------

	private void onCopyResults()
		throws AppException
	{
		String text = AppConfig.INSTANCE.isCopyResultsAsListFile()
											? getResultList().getText(ControlDialog.COMMENT_PREFIX_CHAR)
											: getResultList().getText();
		Utils.putClipboardText(text);
	}

	//------------------------------------------------------------------

	private void onSaveResults()
	{
		getResultList().updateFiles();
	}

	//------------------------------------------------------------------

	private void onViewSavedResults()
	{
		StringBuilder buffer = new StringBuilder();
		List<File> files = getResultList().getFiles();
		for (int i = 0; i < files.size(); i++)
		{
			if (i > 0)
				buffer.append('\n');
			buffer.append(Utils.getPathname(files.get(i)));
		}
		SavedResultsDialog.showDialog(this, buffer.toString());
	}

	//------------------------------------------------------------------

	private void onToggleControlDialog()
	{
		if (controlDialog != null)
			controlDialog.setVisible(!controlDialog.isVisible());
	}

	//------------------------------------------------------------------

	private void onEditPreferences()
	{
		if (PreferencesDialog.showDialog(this))
		{
			ExceptionUtils.setUnixStyle(AppConfig.INSTANCE.isShowUnixPathnames());
			controlDialog.updatePreferences();
		}
	}

	//------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////
//  Instance fields
////////////////////////////////////////////////////////////////////////

	private	TextModel			textModel;
	private	String				currentPathname;
	private	SearchDialog.Kind	searchKind;
	private	boolean				searching;
	private	boolean				controlDialogHidden;
	private	File				deferredFile;
	private	ControlDialog		controlDialog;
	private	SearchDialog		searchDialog;
	private	JPopupMenu			contextMenu;
	private	TextArea			textView;
	private	TextArea			resultArea;
	private	JFileChooser		openFileChooser;
	private	JFileChooser		saveFileChooser;

        
        
        
        
        
        
        
        
   
        
        
        
        
}
